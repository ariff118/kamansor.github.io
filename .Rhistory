install.packages("dplyr")
remotes::install_github("mitchelloharawild/icons")
library(jmv)
library(stargazer)
out1 <- jmv::ttestIS(
data = data_kba1111e,
vars = c("Test 1", "Test 2", "Quiz", "Assignment", "CM"),
group = "Jantina",
hypothesis = "twoGreater",
meanDiff = TRUE,
effectSize = TRUE,
desc = TRUE)
library(dplyr)
library(scales)
library(DT)
data_kba1111e <- readxl::read_excel("files/KBA1111E.xls")
knitr::kable(data_kba1111e[ , -c(3,4)], caption = "Continuous Assessment (40%)")
#  %>%  kable_styling()
datatable(head(data_kba1111e[ , -c(3,4)], n = nrow(data_kba1111e[ , -c(3,4)])), options = list(pageLength = 5))
data_summary <- summary(data_kba1111e[,c(5:9)])
knitr::kable(data_summary, caption = "Performance Summary")
library(jmv)
library(stargazer)
out1 <- jmv::ttestIS(
data = data_kba1111e,
vars = c("Test 1", "Test 2", "Quiz", "Assignment", "CM"),
group = "Jantina",
hypothesis = "twoGreater",
meanDiff = TRUE,
effectSize = TRUE,
desc = TRUE)
stargazer(out1)
library(jmv)
library(stargazer)
out1 <- jmv::ttestIS(
data = data_kba1111e,
vars = c("Test 1", "Test 2", "Quiz", "Assignment", "CM"),
group = "Jantina",
hypothesis = "twoGreater",
meanDiff = TRUE,
effectSize = TRUE,
desc = TRUE)
stargazer(out1)
library(jmv)
library(stargazer)
out1 <- jmv::ttestIS(
data = data_kba1111e,
vars = c("Test 1", "Test 2", "Quiz", "Assignment", "CM"),
group = "Jantina",
hypothesis = "twoGreater",
meanDiff = TRUE,
effectSize = TRUE,
desc = TRUE)
stargazer::(out1)
library(jmv)
library(stargazer)
out1 <- jmv::ttestIS(
data = data_kba1111e,
vars = c("Test 1", "Test 2", "Quiz", "Assignment", "CM"),
group = "Jantina",
hypothesis = "twoGreater",
meanDiff = TRUE,
effectSize = TRUE,
desc = TRUE)
stargazer::("out1")
library(jmv)
library(stargazer)
stargazer::(jmv::ttestIS(
library(jmv)
library(stargazer)
stargazer(jmv::ttestIS(
data = data_kba1111e,
vars = c("Test 1", "Test 2", "Quiz", "Assignment", "CM"),
group = "Jantina",
hypothesis = "twoGreater",
meanDiff = TRUE,
effectSize = TRUE,
desc = TRUE))
library(jmv)
library(stargazer)
jmv::ttestIS(
data = data_kba1111e,
vars = c("Test 1", "Test 2", "Quiz", "Assignment", "CM"),
group = "Jantina",
hypothesis = "twoGreater",
meanDiff = TRUE,
effectSize = TRUE,
desc = TRUE))
library(jmv)
library(stargazer)
jmv::ttestIS(
data = data_kba1111e,
vars = c("Test 1", "Test 2", "Quiz", "Assignment", "CM"),
group = "Jantina",
hypothesis = "twoGreater",
meanDiff = TRUE,
effectSize = TRUE,
desc = TRUE)
library(dplyr)
library(scales)
library(DT)
data_20212_kba1111e <- readxl::read_excel("files/20212/MAT112_KBA1111E.xlsx")
knitr::kable(data_20212_kba1111e[ , -3], caption = "Continuous Assessment (40%)")
#  %>%  kable_styling()
datatable(head(data_20212_kba1111e[ , -3], n = nrow(data_20212_kba1111e[ , -3])), options = list(pageLength = 5))
#get the data and convert to a format that we would expect from melted xts
#will be typical
#also original only uses a single value (val) and not other
require(reshape2)
require(PerformanceAnalytics)
data(managers)
install.packages("PerformanceAnalytics")
install.packages("rCharts")
require(devtools)
install_github('slidify', 'ramnathv', ref = 'dev')
install_github('rCharts', 'ramnathv')
install.packages("D:/Downloads From Internet/From Youtube/ramnathv-rCharts-2c368c8.zip", repos = NULL, type = "win.binary")
install_github("https://github.com/ramnathv/rCharts")
require(PerformanceAnalytics)
data(managers)
managers <- na.omit(managers)
managers.melt <- melt(
data.frame( index( managers ), coredata(cumprod( managers+1 )*100 ) ),
id.vars = 1
)
colnames(managers.melt) <- c("date", "manager","val")
managers.melt[,"date"] <- format(managers.melt[,"date"],format = "%Y-%m-%d")
require(rCharts)
p2 <- rCharts$new()
p2$setLib('libraries/widgets/nyt_home')
p2$setTemplate(script = "libraries/widgets/nyt_home/layouts/nyt_home.html")
p2$set(
description = "This data comes from the managers dataset included in the R package PerformanceAnalytics.",
data = managers.melt,
groups = "manager"
)
cat(noquote(p2$html()))
setwd("D:/R/R Project/vaccine-my")
require(rCharts)
p2 <- rCharts$new()
p2$setLib('libraries/widgets/nyt_home')
p2$setTemplate(script = "libraries/widgets/nyt_home/layouts/nyt_home.html")
p2$set(
description = "This data comes from the managers dataset included in the R package PerformanceAnalytics.",
data = managers.melt,
groups = "manager"
)
cat(noquote(p2$html()))
p2
## server.r
require(rCharts)
shinyServer(function(input, output) {
output$myChart <- renderChart({
names(iris) = gsub("\\.", "", names(iris))
p1 <- rPlot(input$x, input$y, data = iris, color = "Species",
facet = "Species", type = 'point')
p1$addParams(dom = 'myChart')
return(p1)
})
})
## ui.R
require(rCharts)
shinyUI(pageWithSidebar(
headerPanel("rCharts: Interactive Charts from R using polychart.js"),
sidebarPanel(
selectInput(inputId = "x",
label = "Choose X",
choices = c('SepalLength', 'SepalWidth', 'PetalLength', 'PetalWidth'),
selected = "SepalLength"),
selectInput(inputId = "y",
label = "Choose Y",
choices = c('SepalLength', 'SepalWidth', 'PetalLength', 'PetalWidth'),
selected = "SepalWidth")
),
mainPanel(
showOutput("myChart", "polycharts")
)
))
install.packages("shinyUI")
shiny::runApp('rChart-shiny')
runApp('rChart-shiny')
runApp('rChart-shiny')
runApp('rChart-shiny')
runApp('rChart-shiny')
runApp('rChart-shiny')
runApp('rChart-shiny')
runApp('rChart-shiny')
## server.r
require(rCharts)
shinyServer(function(input, output) {
output$myChart <- renderChart({
names(iris) = gsub("\\.", "", names(iris))
p1 <- rPlot(input$x, input$y, data = iris, color = "Species",
facet = "Species", type = 'point')
p1$addParams(dom = 'myChart')
return(p1)
})
})
## ui.R
require(rCharts)
shinyUI(pageWithSidebar(
headerPanel("rCharts: Interactive Charts from R using polychart.js"),
sidebarPanel(
selectInput(inputId = "x",
label = "Choose X",
choices = c('SepalLength', 'SepalWidth', 'PetalLength', 'PetalWidth'),
selected = "SepalLength"),
selectInput(inputId = "y",
label = "Choose Y",
choices = c('SepalLength', 'SepalWidth', 'PetalLength', 'PetalWidth'),
selected = "SepalWidth")
),
mainPanel(
showOutput("myChart", "polycharts")
)
))
shinyUI(ui)
shinyUI()
runApp(rChart_shiny.R)
runApp(rChart_shiny.app)
shinyUI()
runApp()
runApp()
shinyUI(ui)
runApp()
runApp()
runApp()
